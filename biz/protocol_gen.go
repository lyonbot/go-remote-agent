package biz

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AgentNotify) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "cmd":
			z.Cmd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Cmd")
				return
			}
		case "has_stdin":
			z.HasStdin, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "HasStdin")
				return
			}
		case "need_stdout":
			z.NeedStdout, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NeedStdout")
				return
			}
		case "need_stderr":
			z.NeedStderr, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NeedStderr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AgentNotify) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "type"
	err = en.Append(0x86, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "cmd"
	err = en.Append(0xa3, 0x63, 0x6d, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Cmd)
	if err != nil {
		err = msgp.WrapError(err, "Cmd")
		return
	}
	// write "has_stdin"
	err = en.Append(0xa9, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBool(z.HasStdin)
	if err != nil {
		err = msgp.WrapError(err, "HasStdin")
		return
	}
	// write "need_stdout"
	err = en.Append(0xab, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NeedStdout)
	if err != nil {
		err = msgp.WrapError(err, "NeedStdout")
		return
	}
	// write "need_stderr"
	err = en.Append(0xab, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NeedStderr)
	if err != nil {
		err = msgp.WrapError(err, "NeedStderr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AgentNotify) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "type"
	o = append(o, 0x86, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "cmd"
	o = append(o, 0xa3, 0x63, 0x6d, 0x64)
	o = msgp.AppendString(o, z.Cmd)
	// string "has_stdin"
	o = append(o, 0xa9, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x69, 0x6e)
	o = msgp.AppendBool(o, z.HasStdin)
	// string "need_stdout"
	o = append(o, 0xab, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74)
	o = msgp.AppendBool(o, z.NeedStdout)
	// string "need_stderr"
	o = append(o, 0xab, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72)
	o = msgp.AppendBool(o, z.NeedStderr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AgentNotify) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "cmd":
			z.Cmd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cmd")
				return
			}
		case "has_stdin":
			z.HasStdin, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HasStdin")
				return
			}
		case "need_stdout":
			z.NeedStdout, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NeedStdout")
				return
			}
		case "need_stderr":
			z.NeedStderr, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NeedStderr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AgentNotify) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 3 + msgp.StringPrefixSize + len(z.Id) + 4 + msgp.StringPrefixSize + len(z.Cmd) + 10 + msgp.BoolSize + 12 + msgp.BoolSize + 12 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FileInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mode":
			z.Mode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "mtime":
			z.Mtime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Mtime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FileInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "path"
	err = en.Append(0x84, 0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "size"
	err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "mode"
	err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Mode)
	if err != nil {
		err = msgp.WrapError(err, "Mode")
		return
	}
	// write "mtime"
	err = en.Append(0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Mtime)
	if err != nil {
		err = msgp.WrapError(err, "Mtime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FileInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "path"
	o = append(o, 0x84, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "size"
	o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "mode"
	o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint32(o, z.Mode)
	// string "mtime"
	o = append(o, 0xa5, 0x6d, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.Mtime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FileInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mode":
			z.Mode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "mtime":
			z.Mtime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mtime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FileInfo) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Path) + 5 + msgp.Int64Size + 5 + msgp.Uint32Size + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProxyHttpHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "value":
			z.Value, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ProxyHttpHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "name"
	err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "value"
	err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ProxyHttpHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "name"
	o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProxyHttpHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ProxyHttpHeader) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.StringPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProxyHttpRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "url":
			z.URL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "headers":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if cap(z.Headers) >= int(zb0002) {
				z.Headers = (z.Headers)[:zb0002]
			} else {
				z.Headers = make([]ProxyHttpHeader, zb0002)
			}
			for za0001 := range z.Headers {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Headers[za0001].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Name")
							return
						}
					case "value":
						z.Headers[za0001].Value, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Value")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001)
							return
						}
					}
				}
			}
		case "host":
			z.Host, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "body":
			z.Body, err = dc.ReadBytes(z.Body)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ProxyHttpRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "method"
	err = en.Append(0x85, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "url"
	err = en.Append(0xa3, 0x75, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.URL)
	if err != nil {
		err = msgp.WrapError(err, "URL")
		return
	}
	// write "headers"
	err = en.Append(0xa7, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Headers)))
	if err != nil {
		err = msgp.WrapError(err, "Headers")
		return
	}
	for za0001 := range z.Headers {
		// map header, size 2
		// write "name"
		err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Headers[za0001].Name)
		if err != nil {
			err = msgp.WrapError(err, "Headers", za0001, "Name")
			return
		}
		// write "value"
		err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Headers[za0001].Value)
		if err != nil {
			err = msgp.WrapError(err, "Headers", za0001, "Value")
			return
		}
	}
	// write "host"
	err = en.Append(0xa4, 0x68, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Host)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// write "body"
	err = en.Append(0xa4, 0x62, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Body)
	if err != nil {
		err = msgp.WrapError(err, "Body")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ProxyHttpRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "method"
	o = append(o, 0x85, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "url"
	o = append(o, 0xa3, 0x75, 0x72, 0x6c)
	o = msgp.AppendString(o, z.URL)
	// string "headers"
	o = append(o, 0xa7, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Headers)))
	for za0001 := range z.Headers {
		// map header, size 2
		// string "name"
		o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Headers[za0001].Name)
		// string "value"
		o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
		o = msgp.AppendString(o, z.Headers[za0001].Value)
	}
	// string "host"
	o = append(o, 0xa4, 0x68, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.Host)
	// string "body"
	o = append(o, 0xa4, 0x62, 0x6f, 0x64, 0x79)
	o = msgp.AppendBytes(o, z.Body)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProxyHttpRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "url":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "headers":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if cap(z.Headers) >= int(zb0002) {
				z.Headers = (z.Headers)[:zb0002]
			} else {
				z.Headers = make([]ProxyHttpHeader, zb0002)
			}
			for za0001 := range z.Headers {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Headers[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Name")
							return
						}
					case "value":
						z.Headers[za0001].Value, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001)
							return
						}
					}
				}
			}
		case "host":
			z.Host, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "body":
			z.Body, bts, err = msgp.ReadBytesBytes(bts, z.Body)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ProxyHttpRequest) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Method) + 4 + msgp.StringPrefixSize + len(z.URL) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Headers {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Headers[za0001].Name) + 6 + msgp.StringPrefixSize + len(z.Headers[za0001].Value)
	}
	s += 5 + msgp.StringPrefixSize + len(z.Host) + 5 + msgp.BytesPrefixSize + len(z.Body)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProxyHttpResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "connection_error":
			z.ConnectionError, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ConnectionError")
				return
			}
		case "status_code":
			z.StatusCode, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "headers":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if cap(z.Headers) >= int(zb0002) {
				z.Headers = (z.Headers)[:zb0002]
			} else {
				z.Headers = make([]ProxyHttpHeader, zb0002)
			}
			for za0001 := range z.Headers {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Headers[za0001].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Name")
							return
						}
					case "value":
						z.Headers[za0001].Value, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Value")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001)
							return
						}
					}
				}
			}
		case "is_websocket":
			z.IsWebSocket, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsWebSocket")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ProxyHttpResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "connection_error"
	err = en.Append(0x84, 0xb0, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.ConnectionError)
	if err != nil {
		err = msgp.WrapError(err, "ConnectionError")
		return
	}
	// write "status_code"
	err = en.Append(0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	// write "headers"
	err = en.Append(0xa7, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Headers)))
	if err != nil {
		err = msgp.WrapError(err, "Headers")
		return
	}
	for za0001 := range z.Headers {
		// map header, size 2
		// write "name"
		err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Headers[za0001].Name)
		if err != nil {
			err = msgp.WrapError(err, "Headers", za0001, "Name")
			return
		}
		// write "value"
		err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Headers[za0001].Value)
		if err != nil {
			err = msgp.WrapError(err, "Headers", za0001, "Value")
			return
		}
	}
	// write "is_websocket"
	err = en.Append(0xac, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsWebSocket)
	if err != nil {
		err = msgp.WrapError(err, "IsWebSocket")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ProxyHttpResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "connection_error"
	o = append(o, 0x84, 0xb0, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.ConnectionError)
	// string "status_code"
	o = append(o, 0xab, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt32(o, z.StatusCode)
	// string "headers"
	o = append(o, 0xa7, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Headers)))
	for za0001 := range z.Headers {
		// map header, size 2
		// string "name"
		o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Headers[za0001].Name)
		// string "value"
		o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
		o = msgp.AppendString(o, z.Headers[za0001].Value)
	}
	// string "is_websocket"
	o = append(o, 0xac, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74)
	o = msgp.AppendBool(o, z.IsWebSocket)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProxyHttpResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "connection_error":
			z.ConnectionError, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionError")
				return
			}
		case "status_code":
			z.StatusCode, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "headers":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Headers")
				return
			}
			if cap(z.Headers) >= int(zb0002) {
				z.Headers = (z.Headers)[:zb0002]
			} else {
				z.Headers = make([]ProxyHttpHeader, zb0002)
			}
			for za0001 := range z.Headers {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Headers", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Headers", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Headers[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Name")
							return
						}
					case "value":
						z.Headers[za0001].Value, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Headers", za0001)
							return
						}
					}
				}
			}
		case "is_websocket":
			z.IsWebSocket, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsWebSocket")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ProxyHttpResponse) Msgsize() (s int) {
	s = 1 + 17 + msgp.StringPrefixSize + len(z.ConnectionError) + 12 + msgp.Int32Size + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Headers {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Headers[za0001].Name) + 6 + msgp.StringPrefixSize + len(z.Headers[za0001].Value)
	}
	s += 13 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StartPtyRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cmd":
			z.Cmd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Cmd")
				return
			}
		case "args":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			if cap(z.Args) >= int(zb0002) {
				z.Args = (z.Args)[:zb0002]
			} else {
				z.Args = make([]string, zb0002)
			}
			for za0001 := range z.Args {
				z.Args[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Args", za0001)
					return
				}
			}
		case "env":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Env")
				return
			}
			if cap(z.Env) >= int(zb0003) {
				z.Env = (z.Env)[:zb0003]
			} else {
				z.Env = make([]string, zb0003)
			}
			for za0002 := range z.Env {
				z.Env[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Env", za0002)
					return
				}
			}
		case "inherit_env":
			z.InheritEnv, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "InheritEnv")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StartPtyRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "cmd"
	err = en.Append(0x84, 0xa3, 0x63, 0x6d, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Cmd)
	if err != nil {
		err = msgp.WrapError(err, "Cmd")
		return
	}
	// write "args"
	err = en.Append(0xa4, 0x61, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Args)))
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	for za0001 := range z.Args {
		err = en.WriteString(z.Args[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Args", za0001)
			return
		}
	}
	// write "env"
	err = en.Append(0xa3, 0x65, 0x6e, 0x76)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Env)))
	if err != nil {
		err = msgp.WrapError(err, "Env")
		return
	}
	for za0002 := range z.Env {
		err = en.WriteString(z.Env[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Env", za0002)
			return
		}
	}
	// write "inherit_env"
	err = en.Append(0xab, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x76)
	if err != nil {
		return
	}
	err = en.WriteBool(z.InheritEnv)
	if err != nil {
		err = msgp.WrapError(err, "InheritEnv")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StartPtyRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "cmd"
	o = append(o, 0x84, 0xa3, 0x63, 0x6d, 0x64)
	o = msgp.AppendString(o, z.Cmd)
	// string "args"
	o = append(o, 0xa4, 0x61, 0x72, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Args)))
	for za0001 := range z.Args {
		o = msgp.AppendString(o, z.Args[za0001])
	}
	// string "env"
	o = append(o, 0xa3, 0x65, 0x6e, 0x76)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Env)))
	for za0002 := range z.Env {
		o = msgp.AppendString(o, z.Env[za0002])
	}
	// string "inherit_env"
	o = append(o, 0xab, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x76)
	o = msgp.AppendBool(o, z.InheritEnv)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StartPtyRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cmd":
			z.Cmd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cmd")
				return
			}
		case "args":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			if cap(z.Args) >= int(zb0002) {
				z.Args = (z.Args)[:zb0002]
			} else {
				z.Args = make([]string, zb0002)
			}
			for za0001 := range z.Args {
				z.Args[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Args", za0001)
					return
				}
			}
		case "env":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Env")
				return
			}
			if cap(z.Env) >= int(zb0003) {
				z.Env = (z.Env)[:zb0003]
			} else {
				z.Env = make([]string, zb0003)
			}
			for za0002 := range z.Env {
				z.Env[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Env", za0002)
					return
				}
			}
		case "inherit_env":
			z.InheritEnv, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InheritEnv")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StartPtyRequest) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Cmd) + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Args {
		s += msgp.StringPrefixSize + len(z.Args[za0001])
	}
	s += 4 + msgp.ArrayHeaderSize
	for za0002 := range z.Env {
		s += msgp.StringPrefixSize + len(z.Env[za0002])
	}
	s += 12 + msgp.BoolSize
	return
}
